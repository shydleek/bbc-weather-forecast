/* tslint:disable */
/* eslint-disable */
/**
 * Weather forecast service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MapWeatherForecast,
    MapWeatherForecastFromJSON,
    MapWeatherForecastToJSON,
    Place,
    PlaceFromJSON,
    PlaceToJSON,
    WeeklyForecast,
    WeeklyForecastFromJSON,
    WeeklyForecastToJSON,
} from '../models';

export interface MapweatherforecastsRequest {
    date?: string;
}

export interface PlacesRequest {
    date?: string;
}

export interface WeeklyforecastsRequest {
    date?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns information about the weather on map
     */
    async mapweatherforecastsRaw(requestParameters: MapweatherforecastsRequest): Promise<runtime.ApiResponse<Array<MapWeatherForecast>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mapweatherforecasts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MapWeatherForecastFromJSON));
    }

    /**
     * Returns information about the weather on map
     */
    async mapweatherforecasts(requestParameters: MapweatherforecastsRequest): Promise<Array<MapWeatherForecast>> {
        const response = await this.mapweatherforecastsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns information about places and weather
     */
    async placesRaw(requestParameters: PlacesRequest): Promise<runtime.ApiResponse<Array<Place>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/places`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaceFromJSON));
    }

    /**
     * Returns information about places and weather
     */
    async places(requestParameters: PlacesRequest): Promise<Array<Place>> {
        const response = await this.placesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns information about the weather for this week
     */
    async weeklyforecastsRaw(requestParameters: WeeklyforecastsRequest): Promise<runtime.ApiResponse<Array<WeeklyForecast>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/weeklyforecasts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WeeklyForecastFromJSON));
    }

    /**
     * Returns information about the weather for this week
     */
    async weeklyforecasts(requestParameters: WeeklyforecastsRequest): Promise<Array<WeeklyForecast>> {
        const response = await this.weeklyforecastsRaw(requestParameters);
        return await response.value();
    }

}
